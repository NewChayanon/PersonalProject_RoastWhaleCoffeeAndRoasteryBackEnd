// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int       @id @default(autoincrement())
  email      String    @unique @db.VarChar(50)
  password   String    @db.VarChar(256)
  is_admin   Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime  @updatedAt @db.Timestamp(0)
  address    address[]
  cart       cart[]
}

model address {
  id         Int      @id @default(autoincrement())
  first_name String?  @db.VarChar(20)
  last_name  String?  @db.VarChar(20)
  mobile     String?  @db.VarChar(10)
  country    String?  @db.VarChar(20)
  address    String?  @db.VarChar(100)
  district   String?  @db.VarChar(20)
  province   String?  @db.VarChar(20)
  postcode   String?  @db.VarChar(5)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
  user_id    Int
  user       user     @relation(fields: [user_id], references: [id])
  order      order[]
}

model category {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(50)
  product product[]
}

model product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String   @db.VarChar(100)
  details     String   @db.Text
  popular     Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt @db.Timestamp(0)
  is_delete   Boolean  @default(false)
  category_id Int

  category         category           @relation(fields: [category_id], references: [id])
  image            image[]
  product_and_size product_and_size[]
}

model size {
  id               Int                @id @default(autoincrement())
  size             size_type
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @updatedAt @db.Timestamp(0)
  product_and_size product_and_size[]
}

enum size_type {
  ONE_HUNDRED
  TWO_HUNDRED_FIFTY
  FIVE_HUNDRED
}

model product_and_size {
  id         Int         @id @default(autoincrement())
  price      Int
  stock      Int
  size_id    Int
  product_id Int
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @updatedAt @db.Timestamp(0)
  size       size        @relation(fields: [size_id], references: [id])
  product    product     @relation(fields: [product_id], references: [id])
  cart_item  cart_item[]
}

model image {
  id         Int       @id @default(autoincrement())
  image      String?
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime  @updatedAt @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  product_id Int
  product    product   @relation(fields: [product_id], references: [id])
}

model cart {
  id         Int         @id @default(autoincrement())
  is_delete  Boolean     @default(false)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @updatedAt @db.Timestamp(0)
  user_id    Int
  user       user        @relation(fields: [user_id], references: [id])
  cart_items cart_item[]
  order      order[]
}

model cart_item {
  id                  Int              @id @default(autoincrement())
  quantity            Int?
  cart_id             Int
  carts               cart             @relation(fields: [cart_id], references: [id])
  product_and_size_id Int
  product_and_size    product_and_size @relation(fields: [product_and_size_id], references: [id])
}

model order {
  id         Int          @id @default(autoincrement())
  image      String
  date       String
  hour       String
  minute     String
  status     order_status @default(PENDING)
  address_id Int
  address    address      @relation(fields: [address_id], references: [id])
  cart_id    Int
  cart       cart         @relation(fields: [cart_id], references: [id])
  crated_at  DateTime     @default(now()) @db.Timestamp(0)
  updated_at DateTime     @updatedAt @db.Timestamp(0)
}

enum order_status {
  PENDING
  SUCCESSED
  FAILED
}
